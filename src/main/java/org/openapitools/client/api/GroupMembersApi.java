/*
 * ProcessMaker API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@processmaker.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import ProcessMaker_Client.ApiCallback;
import ProcessMaker_Client.ApiClient;
import ProcessMaker_Client.ApiException;
import ProcessMaker_Client.ApiResponse;
import ProcessMaker_Client.Configuration;
import ProcessMaker_Client.Pair;
import ProcessMaker_Client.ProgressRequestBody;
import ProcessMaker_Client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GroupMembers;
import org.openapitools.client.model.GroupMembersEditable;
import org.openapitools.client.model.InlineResponse2007;
import org.openapitools.client.model.InlineResponse2008;
import org.openapitools.client.model.InlineResponse2009;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GroupMembersApi {
    private ApiClient apiClient;

    public GroupMembersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GroupMembersApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createGroupMember
     * @param groupMembersEditable  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call createGroupMemberCall(GroupMembersEditable groupMembersEditable, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = groupMembersEditable;

        // create path and map variables
        String localVarPath = "/group_members";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.setHttpClient(apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            }).build());
        }

        String[] localVarAuthNames = new String[] { "pm_api_bearer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGroupMemberValidateBeforeCall(GroupMembersEditable groupMembersEditable, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'groupMembersEditable' is set
        if (groupMembersEditable == null) {
            throw new ApiException("Missing the required parameter 'groupMembersEditable' when calling createGroupMember(Async)");
        }
        

        okhttp3.Call call = createGroupMemberCall(groupMembersEditable, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Save a new group member
     * 
     * @param groupMembersEditable  (required)
     * @return GroupMembers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GroupMembers createGroupMember(GroupMembersEditable groupMembersEditable) throws ApiException {
        ApiResponse<GroupMembers> resp = createGroupMemberWithHttpInfo(groupMembersEditable);
        return resp.getData();
    }

    /**
     * Save a new group member
     * 
     * @param groupMembersEditable  (required)
     * @return ApiResponse&lt;GroupMembers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GroupMembers> createGroupMemberWithHttpInfo(GroupMembersEditable groupMembersEditable) throws ApiException {
        okhttp3.Call call = createGroupMemberValidateBeforeCall(groupMembersEditable, null, null);
        Type localVarReturnType = new TypeToken<GroupMembers>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Save a new group member (asynchronously)
     * 
     * @param groupMembersEditable  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call createGroupMemberAsync(GroupMembersEditable groupMembersEditable, final ApiCallback<GroupMembers> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = createGroupMemberValidateBeforeCall(groupMembersEditable, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GroupMembers>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteGroupMember
     * @param groupMemberId ID of group_members to return (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call deleteGroupMemberCall(String groupMemberId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/group_members/{group_member_id}"
            .replaceAll("\\{" + "group_member_id" + "\\}", apiClient.escapeString(groupMemberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.setHttpClient(apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            }).build());
        }

        String[] localVarAuthNames = new String[] { "pm_api_bearer" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteGroupMemberValidateBeforeCall(String groupMemberId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'groupMemberId' is set
        if (groupMemberId == null) {
            throw new ApiException("Missing the required parameter 'groupMemberId' when calling deleteGroupMember(Async)");
        }
        

        okhttp3.Call call = deleteGroupMemberCall(groupMemberId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a group member
     * 
     * @param groupMemberId ID of group_members to return (required)
     * @return GroupMembers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GroupMembers deleteGroupMember(String groupMemberId) throws ApiException {
        ApiResponse<GroupMembers> resp = deleteGroupMemberWithHttpInfo(groupMemberId);
        return resp.getData();
    }

    /**
     * Delete a group member
     * 
     * @param groupMemberId ID of group_members to return (required)
     * @return ApiResponse&lt;GroupMembers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GroupMembers> deleteGroupMemberWithHttpInfo(String groupMemberId) throws ApiException {
        okhttp3.Call call = deleteGroupMemberValidateBeforeCall(groupMemberId, null, null);
        Type localVarReturnType = new TypeToken<GroupMembers>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a group member (asynchronously)
     * 
     * @param groupMemberId ID of group_members to return (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call deleteGroupMemberAsync(String groupMemberId, final ApiCallback<GroupMembers> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = deleteGroupMemberValidateBeforeCall(groupMemberId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GroupMembers>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getGroupMemberById
     * @param groupMemberId ID of group members to return (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getGroupMemberByIdCall(String groupMemberId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/group_members/{group_member_id}"
            .replaceAll("\\{" + "group_member_id" + "\\}", apiClient.escapeString(groupMemberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.setHttpClient(apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            }).build());
        }

        String[] localVarAuthNames = new String[] { "pm_api_bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupMemberByIdValidateBeforeCall(String groupMemberId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'groupMemberId' is set
        if (groupMemberId == null) {
            throw new ApiException("Missing the required parameter 'groupMemberId' when calling getGroupMemberById(Async)");
        }
        

        okhttp3.Call call = getGroupMemberByIdCall(groupMemberId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get single group member by ID
     * 
     * @param groupMemberId ID of group members to return (required)
     * @return GroupMembers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GroupMembers getGroupMemberById(String groupMemberId) throws ApiException {
        ApiResponse<GroupMembers> resp = getGroupMemberByIdWithHttpInfo(groupMemberId);
        return resp.getData();
    }

    /**
     * Get single group member by ID
     * 
     * @param groupMemberId ID of group members to return (required)
     * @return ApiResponse&lt;GroupMembers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GroupMembers> getGroupMemberByIdWithHttpInfo(String groupMemberId) throws ApiException {
        okhttp3.Call call = getGroupMemberByIdValidateBeforeCall(groupMemberId, null, null);
        Type localVarReturnType = new TypeToken<GroupMembers>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get single group member by ID (asynchronously)
     * 
     * @param groupMemberId ID of group members to return (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getGroupMemberByIdAsync(String groupMemberId, final ApiCallback<GroupMembers> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getGroupMemberByIdValidateBeforeCall(groupMemberId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GroupMembers>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getGroupMembers
     * @param memberId  (optional)
     * @param orderBy Field to order results by (optional)
     * @param orderDirection  (optional, default to asc)
     * @param perPage  (optional, default to 10)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getGroupMembersCall(Integer memberId, String orderBy, String orderDirection, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/group_members";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (memberId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("member_id", memberId));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        }

        if (orderDirection != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("order_direction", orderDirection));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("per_page", perPage));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.setHttpClient(apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            }).build());
        }

        String[] localVarAuthNames = new String[] { "pm_api_bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupMembersValidateBeforeCall(Integer memberId, String orderBy, String orderDirection, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        okhttp3.Call call = getGroupMembersCall(memberId, orderBy, orderDirection, perPage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns all groups for a given member
     * 
     * @param memberId  (optional)
     * @param orderBy Field to order results by (optional)
     * @param orderDirection  (optional, default to asc)
     * @param perPage  (optional, default to 10)
     * @return InlineResponse2007
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2007 getGroupMembers(Integer memberId, String orderBy, String orderDirection, Integer perPage) throws ApiException {
        ApiResponse<InlineResponse2007> resp = getGroupMembersWithHttpInfo(memberId, orderBy, orderDirection, perPage);
        return resp.getData();
    }

    /**
     * Returns all groups for a given member
     * 
     * @param memberId  (optional)
     * @param orderBy Field to order results by (optional)
     * @param orderDirection  (optional, default to asc)
     * @param perPage  (optional, default to 10)
     * @return ApiResponse&lt;InlineResponse2007&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2007> getGroupMembersWithHttpInfo(Integer memberId, String orderBy, String orderDirection, Integer perPage) throws ApiException {
        okhttp3.Call call = getGroupMembersValidateBeforeCall(memberId, orderBy, orderDirection, perPage, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2007>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns all groups for a given member (asynchronously)
     * 
     * @param memberId  (optional)
     * @param orderBy Field to order results by (optional)
     * @param orderDirection  (optional, default to asc)
     * @param perPage  (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getGroupMembersAsync(Integer memberId, String orderBy, String orderDirection, Integer perPage, final ApiCallback<InlineResponse2007> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getGroupMembersValidateBeforeCall(memberId, orderBy, orderDirection, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2007>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getGroupMembersAvailable
     * @param memberId ID of group member to return (required)
     * @param memberType type of group member to return (required)
     * @param filter Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)
     * @param orderBy Field to order results by (optional)
     * @param orderDirection  (optional, default to asc)
     * @param perPage  (optional, default to 10)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getGroupMembersAvailableCall(String memberId, String memberType, String filter, String orderBy, String orderDirection, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/group_members_available"
            .replaceAll("\\{" + "member_id" + "\\}", apiClient.escapeString(memberId.toString()))
            .replaceAll("\\{" + "member_type" + "\\}", apiClient.escapeString(memberType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        }

        if (orderDirection != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("order_direction", orderDirection));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("per_page", perPage));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.setHttpClient(apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            }).build());
        }

        String[] localVarAuthNames = new String[] { "pm_api_bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupMembersAvailableValidateBeforeCall(String memberId, String memberType, String filter, String orderBy, String orderDirection, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling getGroupMembersAvailable(Async)");
        }
        
        // verify the required parameter 'memberType' is set
        if (memberType == null) {
            throw new ApiException("Missing the required parameter 'memberType' when calling getGroupMembersAvailable(Async)");
        }
        

        okhttp3.Call call = getGroupMembersAvailableCall(memberId, memberType, filter, orderBy, orderDirection, perPage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns all groups available for a given member
     * 
     * @param memberId ID of group member to return (required)
     * @param memberType type of group member to return (required)
     * @param filter Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)
     * @param orderBy Field to order results by (optional)
     * @param orderDirection  (optional, default to asc)
     * @param perPage  (optional, default to 10)
     * @return InlineResponse2008
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2008 getGroupMembersAvailable(String memberId, String memberType, String filter, String orderBy, String orderDirection, Integer perPage) throws ApiException {
        ApiResponse<InlineResponse2008> resp = getGroupMembersAvailableWithHttpInfo(memberId, memberType, filter, orderBy, orderDirection, perPage);
        return resp.getData();
    }

    /**
     * Returns all groups available for a given member
     * 
     * @param memberId ID of group member to return (required)
     * @param memberType type of group member to return (required)
     * @param filter Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)
     * @param orderBy Field to order results by (optional)
     * @param orderDirection  (optional, default to asc)
     * @param perPage  (optional, default to 10)
     * @return ApiResponse&lt;InlineResponse2008&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2008> getGroupMembersAvailableWithHttpInfo(String memberId, String memberType, String filter, String orderBy, String orderDirection, Integer perPage) throws ApiException {
        okhttp3.Call call = getGroupMembersAvailableValidateBeforeCall(memberId, memberType, filter, orderBy, orderDirection, perPage, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2008>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns all groups available for a given member (asynchronously)
     * 
     * @param memberId ID of group member to return (required)
     * @param memberType type of group member to return (required)
     * @param filter Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)
     * @param orderBy Field to order results by (optional)
     * @param orderDirection  (optional, default to asc)
     * @param perPage  (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getGroupMembersAvailableAsync(String memberId, String memberType, String filter, String orderBy, String orderDirection, Integer perPage, final ApiCallback<InlineResponse2008> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getGroupMembersAvailableValidateBeforeCall(memberId, memberType, filter, orderBy, orderDirection, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2008>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUserMembersAvailable
     * @param groupId ID of group to return (required)
     * @param filter Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)
     * @param orderBy Field to order results by (optional)
     * @param orderDirection  (optional, default to asc)
     * @param perPage  (optional, default to 10)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getUserMembersAvailableCall(String groupId, String filter, String orderBy, String orderDirection, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/user_members_available"
            .replaceAll("\\{" + "group_id" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        }

        if (orderDirection != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("order_direction", orderDirection));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("per_page", perPage));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.setHttpClient(apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            }).build());
        }

        String[] localVarAuthNames = new String[] { "pm_api_bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserMembersAvailableValidateBeforeCall(String groupId, String filter, String orderBy, String orderDirection, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getUserMembersAvailable(Async)");
        }
        

        okhttp3.Call call = getUserMembersAvailableCall(groupId, filter, orderBy, orderDirection, perPage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns all users available for a given member
     * 
     * @param groupId ID of group to return (required)
     * @param filter Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)
     * @param orderBy Field to order results by (optional)
     * @param orderDirection  (optional, default to asc)
     * @param perPage  (optional, default to 10)
     * @return InlineResponse2009
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2009 getUserMembersAvailable(String groupId, String filter, String orderBy, String orderDirection, Integer perPage) throws ApiException {
        ApiResponse<InlineResponse2009> resp = getUserMembersAvailableWithHttpInfo(groupId, filter, orderBy, orderDirection, perPage);
        return resp.getData();
    }

    /**
     * Returns all users available for a given member
     * 
     * @param groupId ID of group to return (required)
     * @param filter Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)
     * @param orderBy Field to order results by (optional)
     * @param orderDirection  (optional, default to asc)
     * @param perPage  (optional, default to 10)
     * @return ApiResponse&lt;InlineResponse2009&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2009> getUserMembersAvailableWithHttpInfo(String groupId, String filter, String orderBy, String orderDirection, Integer perPage) throws ApiException {
        okhttp3.Call call = getUserMembersAvailableValidateBeforeCall(groupId, filter, orderBy, orderDirection, perPage, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2009>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns all users available for a given member (asynchronously)
     * 
     * @param groupId ID of group to return (required)
     * @param filter Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)
     * @param orderBy Field to order results by (optional)
     * @param orderDirection  (optional, default to asc)
     * @param perPage  (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getUserMembersAvailableAsync(String groupId, String filter, String orderBy, String orderDirection, Integer perPage, final ApiCallback<InlineResponse2009> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getUserMembersAvailableValidateBeforeCall(groupId, filter, orderBy, orderDirection, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2009>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
