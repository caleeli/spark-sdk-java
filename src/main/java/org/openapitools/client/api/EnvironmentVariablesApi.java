/*
 * ProcessMaker API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@processmaker.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import ProcessMaker_Client.ApiCallback;
import ProcessMaker_Client.ApiClient;
import ProcessMaker_Client.ApiException;
import ProcessMaker_Client.ApiResponse;
import ProcessMaker_Client.Configuration;
import ProcessMaker_Client.Pair;
import ProcessMaker_Client.ProgressRequestBody;
import ProcessMaker_Client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.EnvironmentVariables;
import org.openapitools.client.model.EnvironmentVariablesEditable;
import org.openapitools.client.model.InlineResponse2001;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EnvironmentVariablesApi {
    private ApiClient apiClient;

    public EnvironmentVariablesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EnvironmentVariablesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createEnvironmentVariables
     * @param environmentVariablesEditable  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call createEnvironmentVariablesCall(EnvironmentVariablesEditable environmentVariablesEditable, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = environmentVariablesEditable;

        // create path and map variables
        String localVarPath = "/environment_variables";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.setHttpClient(apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            }).build());
        }

        String[] localVarAuthNames = new String[] { "pm_api_bearer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEnvironmentVariablesValidateBeforeCall(EnvironmentVariablesEditable environmentVariablesEditable, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'environmentVariablesEditable' is set
        if (environmentVariablesEditable == null) {
            throw new ApiException("Missing the required parameter 'environmentVariablesEditable' when calling createEnvironmentVariables(Async)");
        }
        

        okhttp3.Call call = createEnvironmentVariablesCall(environmentVariablesEditable, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Save a new environment_variables
     * 
     * @param environmentVariablesEditable  (required)
     * @return EnvironmentVariables
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EnvironmentVariables createEnvironmentVariables(EnvironmentVariablesEditable environmentVariablesEditable) throws ApiException {
        ApiResponse<EnvironmentVariables> resp = createEnvironmentVariablesWithHttpInfo(environmentVariablesEditable);
        return resp.getData();
    }

    /**
     * Save a new environment_variables
     * 
     * @param environmentVariablesEditable  (required)
     * @return ApiResponse&lt;EnvironmentVariables&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EnvironmentVariables> createEnvironmentVariablesWithHttpInfo(EnvironmentVariablesEditable environmentVariablesEditable) throws ApiException {
        okhttp3.Call call = createEnvironmentVariablesValidateBeforeCall(environmentVariablesEditable, null, null);
        Type localVarReturnType = new TypeToken<EnvironmentVariables>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Save a new environment_variables (asynchronously)
     * 
     * @param environmentVariablesEditable  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call createEnvironmentVariablesAsync(EnvironmentVariablesEditable environmentVariablesEditable, final ApiCallback<EnvironmentVariables> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = createEnvironmentVariablesValidateBeforeCall(environmentVariablesEditable, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EnvironmentVariables>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteEnvironmentVariables
     * @param environmentVariablesId ID of environment_variables to return (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call deleteEnvironmentVariablesCall(String environmentVariablesId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/environment_variables/{environment_variables_id}"
            .replaceAll("\\{" + "environment_variables_id" + "\\}", apiClient.escapeString(environmentVariablesId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.setHttpClient(apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            }).build());
        }

        String[] localVarAuthNames = new String[] { "pm_api_bearer" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEnvironmentVariablesValidateBeforeCall(String environmentVariablesId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'environmentVariablesId' is set
        if (environmentVariablesId == null) {
            throw new ApiException("Missing the required parameter 'environmentVariablesId' when calling deleteEnvironmentVariables(Async)");
        }
        

        okhttp3.Call call = deleteEnvironmentVariablesCall(environmentVariablesId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a environment_variables
     * 
     * @param environmentVariablesId ID of environment_variables to return (required)
     * @return EnvironmentVariables
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EnvironmentVariables deleteEnvironmentVariables(String environmentVariablesId) throws ApiException {
        ApiResponse<EnvironmentVariables> resp = deleteEnvironmentVariablesWithHttpInfo(environmentVariablesId);
        return resp.getData();
    }

    /**
     * Delete a environment_variables
     * 
     * @param environmentVariablesId ID of environment_variables to return (required)
     * @return ApiResponse&lt;EnvironmentVariables&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EnvironmentVariables> deleteEnvironmentVariablesWithHttpInfo(String environmentVariablesId) throws ApiException {
        okhttp3.Call call = deleteEnvironmentVariablesValidateBeforeCall(environmentVariablesId, null, null);
        Type localVarReturnType = new TypeToken<EnvironmentVariables>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a environment_variables (asynchronously)
     * 
     * @param environmentVariablesId ID of environment_variables to return (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call deleteEnvironmentVariablesAsync(String environmentVariablesId, final ApiCallback<EnvironmentVariables> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = deleteEnvironmentVariablesValidateBeforeCall(environmentVariablesId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EnvironmentVariables>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEnvironmentVariables
     * @param filter Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)
     * @param orderBy Field to order results by (optional)
     * @param orderDirection  (optional, default to asc)
     * @param perPage  (optional, default to 10)
     * @param include Include data from related models in payload. Comma seperated list. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getEnvironmentVariablesCall(String filter, String orderBy, String orderDirection, Integer perPage, String include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/environment_variables";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        }

        if (orderDirection != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("order_direction", orderDirection));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("per_page", perPage));
        }

        if (include != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("include", include));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.setHttpClient(apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            }).build());
        }

        String[] localVarAuthNames = new String[] { "pm_api_bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEnvironmentVariablesValidateBeforeCall(String filter, String orderBy, String orderDirection, Integer perPage, String include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        okhttp3.Call call = getEnvironmentVariablesCall(filter, orderBy, orderDirection, perPage, include, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns all environmentVariables that the user has access to
     * 
     * @param filter Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)
     * @param orderBy Field to order results by (optional)
     * @param orderDirection  (optional, default to asc)
     * @param perPage  (optional, default to 10)
     * @param include Include data from related models in payload. Comma seperated list. (optional)
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2001 getEnvironmentVariables(String filter, String orderBy, String orderDirection, Integer perPage, String include) throws ApiException {
        ApiResponse<InlineResponse2001> resp = getEnvironmentVariablesWithHttpInfo(filter, orderBy, orderDirection, perPage, include);
        return resp.getData();
    }

    /**
     * Returns all environmentVariables that the user has access to
     * 
     * @param filter Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)
     * @param orderBy Field to order results by (optional)
     * @param orderDirection  (optional, default to asc)
     * @param perPage  (optional, default to 10)
     * @param include Include data from related models in payload. Comma seperated list. (optional)
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2001> getEnvironmentVariablesWithHttpInfo(String filter, String orderBy, String orderDirection, Integer perPage, String include) throws ApiException {
        okhttp3.Call call = getEnvironmentVariablesValidateBeforeCall(filter, orderBy, orderDirection, perPage, include, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns all environmentVariables that the user has access to (asynchronously)
     * 
     * @param filter Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)
     * @param orderBy Field to order results by (optional)
     * @param orderDirection  (optional, default to asc)
     * @param perPage  (optional, default to 10)
     * @param include Include data from related models in payload. Comma seperated list. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getEnvironmentVariablesAsync(String filter, String orderBy, String orderDirection, Integer perPage, String include, final ApiCallback<InlineResponse2001> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getEnvironmentVariablesValidateBeforeCall(filter, orderBy, orderDirection, perPage, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEnvironmentVariablesById
     * @param environmentVariablesId ID of environment_variables to return (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getEnvironmentVariablesByIdCall(String environmentVariablesId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/environment_variables/{environment_variables_id}"
            .replaceAll("\\{" + "environment_variables_id" + "\\}", apiClient.escapeString(environmentVariablesId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.setHttpClient(apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            }).build());
        }

        String[] localVarAuthNames = new String[] { "pm_api_bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEnvironmentVariablesByIdValidateBeforeCall(String environmentVariablesId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'environmentVariablesId' is set
        if (environmentVariablesId == null) {
            throw new ApiException("Missing the required parameter 'environmentVariablesId' when calling getEnvironmentVariablesById(Async)");
        }
        

        okhttp3.Call call = getEnvironmentVariablesByIdCall(environmentVariablesId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get single environment_variables by ID
     * 
     * @param environmentVariablesId ID of environment_variables to return (required)
     * @return EnvironmentVariables
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EnvironmentVariables getEnvironmentVariablesById(String environmentVariablesId) throws ApiException {
        ApiResponse<EnvironmentVariables> resp = getEnvironmentVariablesByIdWithHttpInfo(environmentVariablesId);
        return resp.getData();
    }

    /**
     * Get single environment_variables by ID
     * 
     * @param environmentVariablesId ID of environment_variables to return (required)
     * @return ApiResponse&lt;EnvironmentVariables&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EnvironmentVariables> getEnvironmentVariablesByIdWithHttpInfo(String environmentVariablesId) throws ApiException {
        okhttp3.Call call = getEnvironmentVariablesByIdValidateBeforeCall(environmentVariablesId, null, null);
        Type localVarReturnType = new TypeToken<EnvironmentVariables>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get single environment_variables by ID (asynchronously)
     * 
     * @param environmentVariablesId ID of environment_variables to return (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getEnvironmentVariablesByIdAsync(String environmentVariablesId, final ApiCallback<EnvironmentVariables> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getEnvironmentVariablesByIdValidateBeforeCall(environmentVariablesId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EnvironmentVariables>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateEnvironmentVariables
     * @param environmentVariablesId ID of environment_variables to return (required)
     * @param environmentVariablesEditable  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call updateEnvironmentVariablesCall(String environmentVariablesId, EnvironmentVariablesEditable environmentVariablesEditable, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = environmentVariablesEditable;

        // create path and map variables
        String localVarPath = "/environment_variables/{environment_variables_id}"
            .replaceAll("\\{" + "environment_variables_id" + "\\}", apiClient.escapeString(environmentVariablesId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.setHttpClient(apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            }).build());
        }

        String[] localVarAuthNames = new String[] { "pm_api_bearer" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEnvironmentVariablesValidateBeforeCall(String environmentVariablesId, EnvironmentVariablesEditable environmentVariablesEditable, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'environmentVariablesId' is set
        if (environmentVariablesId == null) {
            throw new ApiException("Missing the required parameter 'environmentVariablesId' when calling updateEnvironmentVariables(Async)");
        }
        
        // verify the required parameter 'environmentVariablesEditable' is set
        if (environmentVariablesEditable == null) {
            throw new ApiException("Missing the required parameter 'environmentVariablesEditable' when calling updateEnvironmentVariables(Async)");
        }
        

        okhttp3.Call call = updateEnvironmentVariablesCall(environmentVariablesId, environmentVariablesEditable, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a environment_variables
     * 
     * @param environmentVariablesId ID of environment_variables to return (required)
     * @param environmentVariablesEditable  (required)
     * @return EnvironmentVariables
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EnvironmentVariables updateEnvironmentVariables(String environmentVariablesId, EnvironmentVariablesEditable environmentVariablesEditable) throws ApiException {
        ApiResponse<EnvironmentVariables> resp = updateEnvironmentVariablesWithHttpInfo(environmentVariablesId, environmentVariablesEditable);
        return resp.getData();
    }

    /**
     * Update a environment_variables
     * 
     * @param environmentVariablesId ID of environment_variables to return (required)
     * @param environmentVariablesEditable  (required)
     * @return ApiResponse&lt;EnvironmentVariables&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EnvironmentVariables> updateEnvironmentVariablesWithHttpInfo(String environmentVariablesId, EnvironmentVariablesEditable environmentVariablesEditable) throws ApiException {
        okhttp3.Call call = updateEnvironmentVariablesValidateBeforeCall(environmentVariablesId, environmentVariablesEditable, null, null);
        Type localVarReturnType = new TypeToken<EnvironmentVariables>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a environment_variables (asynchronously)
     * 
     * @param environmentVariablesId ID of environment_variables to return (required)
     * @param environmentVariablesEditable  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call updateEnvironmentVariablesAsync(String environmentVariablesId, EnvironmentVariablesEditable environmentVariablesEditable, final ApiCallback<EnvironmentVariables> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = updateEnvironmentVariablesValidateBeforeCall(environmentVariablesId, environmentVariablesEditable, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EnvironmentVariables>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
