/*
 * ProcessMaker API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@processmaker.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import ProcessMaker_Client.ApiException;
import java.io.File;
import org.openapitools.client.model.InlineResponse20016;
import org.openapitools.client.model.Screens;
import org.openapitools.client.model.ScreensEditable;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ScreensApi
 */
@Ignore
public class ScreensApiTest {

    private final ScreensApi api = new ScreensApi();

    
    /**
     * Save a new screens
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createScreensTest() throws ApiException {
        ScreensEditable screensEditable = null;
        Screens response = api.createScreens(screensEditable);

        // TODO: test validations
    }
    
    /**
     * Delete a screen
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteScreenTest() throws ApiException {
        String screensId = null;
        Screens response = api.deleteScreen(screensId);

        // TODO: test validations
    }
    
    /**
     * duplicate a screen
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void duplicateScriptTest() throws ApiException {
        String screensId = null;
        ScreensEditable screensEditable = null;
        Screens response = api.duplicateScript(screensId, screensEditable);

        // TODO: test validations
    }
    
    /**
     * Export a single screen by ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void exportScreenTest() throws ApiException {
        String screensId = null;
        Screens response = api.exportScreen(screensId);

        // TODO: test validations
    }
    
    /**
     * Returns all screens that the user has access to
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getScreensTest() throws ApiException {
        String filter = null;
        String orderBy = null;
        String orderDirection = null;
        Integer perPage = null;
        String include = null;
        InlineResponse20016 response = api.getScreens(filter, orderBy, orderDirection, perPage, include);

        // TODO: test validations
    }
    
    /**
     * Get single screens by ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getScreensByIdTest() throws ApiException {
        String screensId = null;
        Screens response = api.getScreensById(screensId);

        // TODO: test validations
    }
    
    /**
     * Import a new screen
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importScreenTest() throws ApiException {
        File file = null;
        Screens response = api.importScreen(file);

        // TODO: test validations
    }
    
    /**
     * Update a screen
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateScreenTest() throws ApiException {
        String screensId = null;
        ScreensEditable screensEditable = null;
        Screens response = api.updateScreen(screensId, screensEditable);

        // TODO: test validations
    }
    
}
