/*
 * ProcessMaker API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@processmaker.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import ProcessMaker_Client.ApiException;
import org.openapitools.client.model.InlineResponse20017;
import org.openapitools.client.model.ScreensEditable;
import org.openapitools.client.model.Scripts;
import org.openapitools.client.model.ScriptsEditable;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ScriptsApi
 */
@Ignore
public class ScriptsApiTest {

    private final ScriptsApi api = new ScriptsApi();

    
    /**
     * Save a new script
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createScriptTest() throws ApiException {
        ScriptsEditable scriptsEditable = null;
        Scripts response = api.createScript(scriptsEditable);

        // TODO: test validations
    }
    
    /**
     * Delete a script
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteScriptTest() throws ApiException {
        String scriptId = null;
        Scripts response = api.deleteScript(scriptId);

        // TODO: test validations
    }
    
    /**
     * duplicate a script
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void duplicateScreenTest() throws ApiException {
        String screensId = null;
        ScreensEditable screensEditable = null;
        Scripts response = api.duplicateScreen(screensId, screensEditable);

        // TODO: test validations
    }
    
    /**
     * Returns all scripts that the user has access to
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getScriptsTest() throws ApiException {
        String filter = null;
        String orderBy = null;
        String orderDirection = null;
        Integer perPage = null;
        String include = null;
        InlineResponse20017 response = api.getScripts(filter, orderBy, orderDirection, perPage, include);

        // TODO: test validations
    }
    
    /**
     * Get single script by ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getScriptsByIdTest() throws ApiException {
        String scriptId = null;
        Scripts response = api.getScriptsById(scriptId);

        // TODO: test validations
    }
    
    /**
     * Test script code without saving it
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getScriptsPreviewTest() throws ApiException {
        Integer scriptId = null;
        String data = null;
        String config = null;
        String code = null;
        Object response = api.getScriptsPreview(scriptId, data, config, code);

        // TODO: test validations
    }
    
    /**
     * Update a script
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateScriptTest() throws ApiException {
        String scriptId = null;
        ScriptsEditable scriptsEditable = null;
        Scripts response = api.updateScript(scriptId, scriptsEditable);

        // TODO: test validations
    }
    
}
